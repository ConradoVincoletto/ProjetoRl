namespace ProjetoRl.ProjetoRl.Domain.AccessTokens;
/// <summary>Interface that standardizes the access token repository.</summary>
public interface IAccessTokenRepository
{
    /// <summary>Gets the details of a token.</summary>
    /// <param name="jWTToken">Desired token.</param>          
    /// <returns>Detailed information of the token.</returns>
    Task<AccessToken?> GetAsync(string jWTToken);

    /// <summary>Updates a token.</summary>
    /// <param name="token">Token to be updated.</param>
    Task SaveAsync(AccessToken token);

    /// <summary>Deletes a token.</summary>
    /// <param name="accessTokenId">Token to be deleted.</param>
    Task RemoveAsync(string accessTokenId);

    /// <summary>Cancels a token.</summary>
    /// <param name="userId">Identification code of the user for whom the token is to be revoked.</param>
    /// <param name="type">Type of passport that identifies the external service to which the identification code belongs.</param>
    Task CancelTokenAsync(string userId);

    /// <summary>Gets the last token generated by a user.</summary>
    /// <param name="userId">Identification code of the user for whom the last token is to be retrieved.</param>
    /// <returns>User's last access token.</returns>
    Task<AccessToken?> GetLastAccessTokenAsync(string userId);
}